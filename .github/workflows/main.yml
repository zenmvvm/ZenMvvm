name: .NET Standard
on:
  push:
  pull_request:
  release:
    types:
      - published
env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Project name to pack and publish
  PROJECT_NAME: ZenMvvm
  # GitHub Packages Feed settings
  GITHUB_FEED: https://nuget.pkg.github.com/zenmvvm/
  GITHUB_USER: z33bs
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Official NuGet Feed settings
  NUGET_FEED: https://api.nuget.org/v3/index.json
  NUGET_KEY: ${{ secrets.NUGET_KEY }}
  # MyGet Feed settings
  MYGET_FEED: https://www.myget.org/F/zeebz-open-source/api/v3/index.json
  MYGET_KEY: ${{ secrets.MYGET_KEY}}
  #NIGHTLY_PACKAGE_VERSION -> will be set in script
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [ ubuntu-latest, windows-latest, macos-latest ]
        os: [ ubuntu-latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.100
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build -c Release --no-restore
#       - name: Test
#         run: dotnet test -c Release
      - name: Set current date as env variable
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true        
        run: echo "::set-env name=NIGHTLY_PACKAGE_VERSION::$(date +'%Y%m%d.%H.%M.%S')"
      - name: Pack
        if: matrix.os == 'ubuntu-latest'
        run: dotnet pack -v normal -c Release --no-restore --include-symbols --include-source -p:PackageVersion=$NIGHTLY_PACKAGE_VERSION src/$PROJECT_NAME/$PROJECT_NAME.*proj
      - name: Upload Artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: nupkg
          path: ./src/${{ env.PROJECT_NAME }}/bin/Release/*.nupkg
  prerelease:
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1.5.0
      with:
        dotnet-version: 3.1.301
        source-url: ${{ env.GITHUB_FEED }}
      env:
        NUGET_AUTH_TOKEN: '%NUGET_AUTH_TOKEN%'      
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    - name: Download Artifact
      uses: actions/download-artifact@v1
      with:
        name: nupkg
#       - name: Push to GitHub Feed
#         run: |
#           for f in ./nupkg/*.nupkg
#           do
#             curl -vX PUT -u "$GITHUB_USER:$GITHUB_TOKEN" -F package=@$f $GITHUB_FEED
#           done
    - name: PushGithub
      run: dotnet nuget push ./nupkg/*.nupkg --no-symbols --skip-duplicate
      env:
        NUGET_AUTH_TOKEN: ${{ env.GITHUB_TOKEN }}
    - name: Publish Nuget to GitHub registry
      run: dotnet nuget push ./nupkg/*.nupkg -k $GITHUB_TOKEN -s $GITHUB_FEED --skip-duplicate
    - name: Push to MyGet Feed
      run: dotnet nuget push ./nupkg/*.nupkg --source $MYGET_FEED --skip-duplicate --api-key $MYGET_KEY
  deploy:
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.100
      - name: Create Release NuGet package
        run: |
          arrTag=(${GITHUB_REF//\// })
          VERSION="${arrTag[2]}"
          echo Version: $VERSION
          VERSION="${VERSION//v}"
          echo Clean Version: $VERSION
          dotnet pack -v normal -c Release --include-symbols --include-source -p:PackageVersion=$VERSION -o nupkg src/$PROJECT_NAME/$PROJECT_NAME.*proj
      - name: Push to GitHub Feed
        run: |
          for f in ./nupkg/*.nupkg
          do
            curl -vX PUT -u "$GITHUB_USER:$GITHUB_TOKEN" -F package=@$f $GITHUB_FEED
          done
      - name: Push to NuGet Feed
        run: dotnet nuget push ./nupkg/*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY
